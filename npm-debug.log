0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/Cellar/node/7.5.0/bin/node',
1 verbose cli   '/usr/local/bin/npm',
1 verbose cli   'publish' ]
2 info using npm@4.1.2
3 info using node@v7.5.0
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   escapedName: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/Users/bwatson3/Code/cox-chapi',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /Users/bwatson3/.npm/cox-chapi/1.0.0/package.tgz not in flight; packing
9 verbose correctMkdir /Users/bwatson3/.npm correctMkdir not in flight; initializing
10 info lifecycle cox-chapi@1.0.0~prepublish: cox-chapi@1.0.0
11 silly lifecycle cox-chapi@1.0.0~prepublish: no script for prepublish, continuing
12 info lifecycle cox-chapi@1.0.0~prepare: cox-chapi@1.0.0
13 silly lifecycle cox-chapi@1.0.0~prepare: no script for prepare, continuing
14 verbose tar pack [ '/Users/bwatson3/.npm/cox-chapi/1.0.0/package.tgz',
14 verbose tar pack   '/Users/bwatson3/Code/cox-chapi' ]
15 verbose tarball /Users/bwatson3/.npm/cox-chapi/1.0.0/package.tgz
16 verbose folder /Users/bwatson3/Code/cox-chapi
17 verbose addLocalTarball adding from inside cache /Users/bwatson3/.npm/cox-chapi/1.0.0/package.tgz
18 verbose correctMkdir /Users/bwatson3/.npm correctMkdir not in flight; initializing
19 silly cache afterAdd cox-chapi@1.0.0
20 verbose afterAdd /Users/bwatson3/.npm/cox-chapi/1.0.0/package/package.json not in flight; writing
21 verbose correctMkdir /Users/bwatson3/.npm correctMkdir not in flight; initializing
22 verbose afterAdd /Users/bwatson3/.npm/cox-chapi/1.0.0/package/package.json written
23 silly publish { name: 'cox-chapi',
23 silly publish   version: '1.0.0',
23 silly publish   description: 'A node module that encapsulates API calls for cloudhealth',
23 silly publish   main: 'index.js',
23 silly publish   dependencies: { async: '^2.0.1', querystring: '^0.2.0' },
23 silly publish   devDependencies: { chai: '^3.5.0', proxyquire: '^1.7.10', sinon: '^1.17.6' },
23 silly publish   scripts:
23 silly publish    { test: 'istanbul cover _mocha -- -R spec --recursive',
23 silly publish      jsdoc: 'rm -r ./docs 2> /dev/null; jsdoc -c ./jsdoc.json -r -P ./package.json -R ./README.md -d docs .; jsdoc2md --src index.js --src ./components/**/*.js --src ./utils/**/*.js --separators > ./docs/DOC.md' },
23 silly publish   keywords: [ 'cloud', 'cloudhealth', 'health', 'api', 'rest', 'cli' ],
23 silly publish   author: { name: 'Ben Watson', url: 'ben.watson.developer@gmail.com' },
23 silly publish   license: 'MIT',
23 silly publish   bin: { chapi: './bin/chapi.js' },
23 silly publish   readme: '# chapi\n\nNote: This node module is developed entirely separate from the CloudHealth application and APIs (https://github.com/CloudHealth/cht_api_guide). This module is not guaranteed to always function properly with CloudHealth\'s API due to the potential of their API changing and the fact that this module is not maintained by the same developers that developed the CloudHealth application or API. However, we are in contact with CloudHealth and will update this tool to cover changes to their API.\n\n## Installation\n\nThis package can be installed as a command-line util by running\n\n```bash\nnpm install -g cox-chapi\n```\n\nor as a module to be used in a node.js project\n\n```bash\nnpm install cox-chapi --save\n```\n\nwhich can then be used in a Node.js script by requiring `cox-chapi`\n\n## Usage\n\nThe main export of this module is the CloudHealth namespace. It contains classes such as Account, Asset, and Perspective from which objects can be instantiated that contain functions to make API calls to CloudHealth. Instantiating each class takes one argument: your CloudHealth api key. This key can be reset by calling the object\'s set_api_key method with your api key as the first argument. A valid api key is required for any of the object\'s methods to work.\n\nTo use the module in Node.js, first require the module:\n\n```javascript\nvar CloudHealth = require(\'cox-chapi\');\n```\n\nThen instantiate an object from the class of whichever CloudHealth API you want to use:\n\n```javascript\nvar account = new CloudHealth.Account(\'<your-cloudhealth-api-key>\');\n```\n\nNow you can begin calling the object\'s methods. Each method takes a requestCallback that will be given two items: an error and the return data. If the call succeeds, the error will be null and the data field will contain your data, otherwise the error will be an error object and the data field may contain information useful for debugging. For example, the following script will get and print an account with the id \'1234567890\' on success, or throw an error on failure:\n\n```javascript\nvar CloudHealth = require(\'cox-chapi\');\nvar account = new CloudHealth.Account(\'sdafa-asdf-dsfasdf-asdf\');\n\naccount.get(1234567890, function(err, data) {\n  if (err) {\n    throw err;\n  }\n  else {\n    console.log(JSON.stringify(data));\n  }\n});\n```\n\nFor further documentation of methods, see [Documentation](./doc/DOC.md)\n\nThis module can also be used from the command-line. To see how to use this module from the command-line see [Command Line](#command-line)\n\n#### Extra Utilities\n\nSome of the functions used by this module can be found in the utils/chapi.js file. In Node.js, these functions can be accessed through\n\n```javascript\nvar CloudHealth = require(\'cox-chapi\');\nvar utils = CloudHealth.utils;\n```\n\n## Examples\n\nExamples can be found in the examples folder under the folder for their component name (ie. Account examples are in examples/account). The examples assume the existence of the file examples/config.js which contains a JSON object like `{"api_key": "<your-api-key>"}`. Create this file with your api key if you wish to see the examples work. You may also need to change some of the dummy data used in the examples in order for them to grab actual data\n\n## Documentation\n\nHTML pages containing documentation for all components of this module can be found at https://cox-automotive.github.io/cox-chapi/docs/cox-chapi/1.0.0/ or the same information can be found in a markdown file at `docs/Doc.md`.\n\n## Command Line\n\n#### Setup\n\nOn top of being an npm module that can be used with other node.js code, this module creates a command-line utility called `chapi`. To get this command line utility, run `npm install -g <the-name-of-this-repo>`.\n\nThe utility works by first setting up your API key by getting an API key from CloudHealth and calling\n\n```bash\nchapi set_api_key <your-cloudhealth-api-key>\n```\n\nThis only needs to be done once. This command will create a json object named .cloudhealthapi.json in your home directory containing your API key for use in future calls to the chapi command-line tool.\n\n#### Usage\n\nThe chapi command can be used as follows:\n\n```bash\nchapi <component-name> <function-name> [<flags>] [<parameters>]\n```\n\nExcluding "set_api_key" which only takes a String, all of the functions in this module that can be called from the command line can take an optional flags object and at most one parameter followed by a callback. The chapi command line utility takes care of the callback for you, printing either an error or the JSON result of whichever function you specified.\n\nSome functions can take a flags object as first parameter, which can be specified as key-value pairs in the form `--key="value"`. The quotes are optional unless the value contains spaces. For example:\n\n```bash\nchapi account list --all="true"\n```\n\nNote: flags with a value of true can be specified without a value and run just the same (ie. --all="true" is equivalent to --all)\n\nFurthermore, some functions can take a flags object as well as another parameter, and in those cases both flags and parameters can be specified in the same command, like this:\n\n```javascript\nchapi perspective destroy --force 1234567890\n```\n\nPiped-in JSON data can also be given to functions to make it easier to pass in large JSON data. For instance, assume we have a file account.json:\n```json\n{\n  "name": "Example Account",\n  "authentication": {\n    "protocol": "access_key",\n    "access_key": "QQQQQQQQQQQQQQQ",\n    "secret_key": "sosososososososososososososoSecret"\n  },\n  "billing": {\n    "bucket": "my-fake-billing-bucket"\n  },\n  "cloudtrail": {\n    "enabled": "true",\n    "bucket": "my-fake-cloudtrail-bucket"\n  },\n  "aws_config": {\n    "enabled": "true",\n    "bucket": "my-fake-aws-config-bucket",\n    "prefix": "foo"\n  },\n  "tags": [\n    {"key": "Environment", "value": "Production"}\n  ]\n}\n```\n\nWe can give this data to our chapi command like this:\n\n```bash\ncat account.json | chapi account create\n```\n\nTo see a full list of commands, refer to the [Documentation](doc/DOC.md)\n',
23 silly publish   readmeFilename: 'README.md',
23 silly publish   gitHead: '0315972c8d4d431bc5b82100989cea721bc3d1d3',
23 silly publish   _id: 'cox-chapi@1.0.0',
23 silly publish   _shasum: 'ca379c42cbc4930e1d28bee1c204a35ee3fbfc06',
23 silly publish   _from: '.' }
24 info lifecycle cox-chapi@1.0.0~prepublishOnly: cox-chapi@1.0.0
25 silly lifecycle cox-chapi@1.0.0~prepublishOnly: no script for prepublishOnly, continuing
26 verbose getPublishConfig undefined
27 silly mapToRegistry name cox-chapi
28 silly mapToRegistry using default registry
29 silly mapToRegistry registry https://registry.npmjs.org/
30 silly mapToRegistry data Result {
30 silly mapToRegistry   raw: 'cox-chapi',
30 silly mapToRegistry   scope: null,
30 silly mapToRegistry   escapedName: 'cox-chapi',
30 silly mapToRegistry   name: 'cox-chapi',
30 silly mapToRegistry   rawSpec: '',
30 silly mapToRegistry   spec: 'latest',
30 silly mapToRegistry   type: 'tag' }
31 silly mapToRegistry uri https://registry.npmjs.org/cox-chapi
32 verbose publish registryBase https://registry.npmjs.org/
33 silly publish uploading /Users/bwatson3/.npm/cox-chapi/1.0.0/package.tgz
34 verbose request uri https://registry.npmjs.org/cox-chapi
35 verbose request sending authorization for write operation
36 info attempt registry request try #1 at 11:28:40 AM
37 verbose request using bearer token for auth
38 verbose request id 48bc2ad470626369
39 http request PUT https://registry.npmjs.org/cox-chapi
40 http 403 https://registry.npmjs.org/cox-chapi
41 verbose headers { 'content-type': 'application/json',
41 verbose headers   'cache-control': 'max-age=300',
41 verbose headers   'content-length': '95',
41 verbose headers   'accept-ranges': 'bytes',
41 verbose headers   date: 'Wed, 29 Mar 2017 15:26:03 GMT',
41 verbose headers   via: '1.1 varnish',
41 verbose headers   connection: 'keep-alive',
41 verbose headers   'x-served-by': 'cache-atl6246-ATL',
41 verbose headers   'x-cache': 'MISS',
41 verbose headers   'x-cache-hits': '0',
41 verbose headers   'x-timer': 'S1490801162.640670,VS0,VE889',
41 verbose headers   vary: 'Accept-Encoding' }
42 verbose request invalidating /Users/bwatson3/.npm/registry.npmjs.org/cox-chapi on PUT
43 error publish Failed PUT 403
44 verbose stack Error: "You cannot publish over the previously published version 1.0.0." : cox-chapi
44 verbose stack     at makeError (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:304:12)
44 verbose stack     at CachingRegistryClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:292:14)
44 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:212:14)
44 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:186:22)
44 verbose stack     at emitTwo (events.js:106:13)
44 verbose stack     at Request.emit (events.js:192:7)
44 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1081:10)
44 verbose stack     at emitOne (events.js:96:13)
44 verbose stack     at Request.emit (events.js:189:7)
44 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1001:12)
45 verbose statusCode 403
46 verbose pkgid cox-chapi
47 verbose cwd /Users/bwatson3/Code/cox-chapi
48 error Darwin 15.6.0
49 error argv "/usr/local/Cellar/node/7.5.0/bin/node" "/usr/local/bin/npm" "publish"
50 error node v7.5.0
51 error npm  v4.1.2
52 error code E403
53 error "You cannot publish over the previously published version 1.0.0." : cox-chapi
54 error If you need help, you may report this error at:
54 error     <https://github.com/npm/npm/issues>
55 verbose exit [ 1, true ]
